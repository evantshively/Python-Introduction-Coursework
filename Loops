'''
Algorithms make it necessary for a programming language to 
have a construction which makes it possible to carry out a sequence 
of statements repeatedly. 

Loops: 
-Count-controlled loops: for(i=0; i <= n; i++) -This structure is not Python Code
-Condition-controlled loop - while loop and do while loop

Pseudo Code: 
While (condition is true) 
    do something 
    % Note: The "something" should eventually result
    % in the condition being false
'''

'''
Loops 1: A while loop
'''

#Example of a while loop
# The following example calculates the sum of numbers from 1 to 100
n = 100
total_sum = 0
counter = 1 
while (counter <= n):
    total_sum = total_sum + counter # += counter
    print(total_sum)
    counter += 1 # come back 2
    print(counter)

print("Sum of 1 until " + str(n) + " results in " + str(total_sum))

'''
Loops 2 : if, elif, and else loops

We will create a number guessing game to show how to use these different commands in loops

'''

import random  # module that allows the creation of random events
upper_bound = 20 # set our two bonds for our random number to guess
lower_bound = 1


rndNumber = random.randint(lower_bound, upper_bound) # Uses random module to store a randNumber between 1 and 20
guess = 0
while guess != rndNumber:
    guess = int(input("Guess New Number: "))
    if guess > 0:
        if guess > rndNumber:
            print("Number too large")
        elif guess < rndNumber:
            print("Number too small")
    else:
        print("Sorry that you're giving up")
        break
else:    # If none of the conditions are met the loop will go here. 
    print("You made it!")
    

'''
Loops 3: More loop examples
Creating a while Loop that averages multiple numbers
'''

# Keep asking for numbers until count numbers have been entered
#prints the average value 

sum = 0.0
print("This program will take several numbers then average them.")
count = int(input("How many numbers would you like to average: "))
current_count = 0 

while current_count < count:
    current_count = current_count + 1 # this prevents the loop from running endlessly
    number = float(input("Enter a number: "))
    sum = sum + number
    
print("The average was: ", sum / count)

'''
Loops 4 : Continued examples

Using the end = " " command

setting parameters via for and in 

'''

#How to use the end = " " command to print all your outputs on one line

languages = ["C", "C++", "Perl", "Python"]

for language in languages:
    print(language, end = " ")

words = ['cat', 'window', "tiger"]

for w in words:
    print(w, w[0], w[-1], len(w)) # You can call global variables through object reference
    
'''
Loops 5: For Loops

Important to note that For loops can be expensive in terms of processing power if you are working with a large list
For loops will comb through the entire data source you give it
'''

edibles = ["bacon", "spam", "eggs", "nuts"] # Data 

print(id(edibles))
for food in edibles:
    print(food)
    if food == "spam":
        print("No more spam please!")
        #break
    if food != "spam":
        print("Great, delicious " + food)
else:
    print("I am glad: No Spam!")
print("Finally, done!")

'''
Loops 6: Using the range function in a loop
'''

#built in function called range() 
#generates an interator of Arithmetic progressions
#using range will help maximize your work potential Range increases performance

print(range(5))
for i in range(5):
    print(i)

print(list(range(4, 10)))

print(list(range(4, 50, 5))) # the third number is setting the increment

print(list(range(50, 4, -5)))

n = 200
sum = 0
for counter in range(1, n+1):
    sum = sum + counter 
print("Sum of 1 until %d: %d" % (n, sum))

'''
Loops 7: Final Example
Creating a Fibonacci Sequence as a loop
'''

fibonacci = [0, 1, 1, 2, 3, 5, 8, 13, 21]
print(fibonacci[3])
#print(type(fibonacci))
#print(len(fibonacci))
for i in range(len(fibonacci)):
    print(i, fibonacci[i]) 
 
#Printing Strings via loops 

strText = "This is Python"
for s in range(0, len(strText)):
    print(strText[s], end = "")
    
lstText = ["This", "is", "Python"]
for l in range(len(lstText)):
    print(lstText[1])
    
