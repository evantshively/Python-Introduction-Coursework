'''
Python Introduction Work

'''

''' 
Functions 1: Understanding and Using Functions

Pseudocode for a function in Python, how it works

begins with def (definition) 

def function_name(Parameter List):
    statements -> function body
    return -> statement
    
Functions are First Class Objects: 
You can treat this as a variable, or pass as an arguement for another function,
or even return them as values from other functions 

'''

#simple function

def greet(name):
    print("Hi " + name)

#Now we will call the above greet function 

playerName = input("Hello what is your name?: ")   
greet(playerName)

def welcome(character):
    print("Hello " + character + "," + " Welcome to the Game!")

characterName = input("Please enter your character name: ")
welcome(characterName)

# You can also accomplish the same idea by attaching it to a variable

varGreet = greet("Evan")

print(varGreet)


'''
Functions 2: Basic Math Functions

How to create basic math functions and use the return command

'''
def fahrenheit(T_in_celsius):
    return (T_in_celsius * 9 / 5) + 32
    
# return command returns the output

print(fahrenheit(25))

# We can also use variables within the function to return our value

def fahrenheit2(T_in_celsius2):
    valReturn = (T_in_celsius2)
    return valReturn

print(fahrenheit2(27))

# You can use the pass command to null the operation

# How to run mulitple data points through the function

for t in (22.6, 25.7, 28, 32, 29): 
    print(t, ":", fahrenheit(t))

# Continued pratice

def times5(number):
    numberTimesFive = number * 5
    return numberTimesFive

for n in (7, 9, 10, 11, 15):
    print(n, ':', times5(n))
    
'''
Functions 3: Default Arguements
A Default Arguement using string Variable

'''
#Define function hello based on string variable
def hello(name = "everybody"):
    print("Hello " + name + "!")

hello() #This prints Hello everybody! 
hello('Evan') # This prints Hello Evan!

'''
Functions 4: Arguement Annotations

Function arguement annotations can be useful way to give programmers hints
about how a function is supposed to be used. These annotations are added with : 
and can be seen when calling the help(function) command

'''

def add(x:int, y:int) -> int: #use colon to provide more information of what you need
    return x + y 

print(help(add))
print(add(20, 2))

listNum = ([2,3], [4,5], [6,8]) 
print(add(listNum[0], listNum[-1])) # This is printing the full list 

#Practice 

def combineThree(x: int, y:int, z:int) -> int:
    return x + y + z

data = ([1, 4, 6], [7, 9, 10], [20, 5, 4], [30, 4, 6])

print(combineThree(data[0], data[1], data[2], data[3])) 
# This will combine all our data into one tuple 

'''
Functions 5: Returning multiple values

To return multiple values from a function, simply return a tuple 

'''

def myFunc():
    return 1, "Hello", [1,2, "world"] # tuple being returned

print(myFunc())

# We can also use variables to print individual parts of this function return

a, b, c = myFunc()
print(c)
print(a)
print(b, c)

'''
Functions 6: Recursion

Recursion in programming is where a function calls itself one or more time in its body.
In Computer science, recursion is a method where the solution to a problem is based on
solving smaller instances of the same problem.

'''

# As an example here is a function which will return the factorial for a number

def factorial(number):
    #error handling #This is doing a check
    #in order to calculate the function we must have an integer > 0
    if not isinstance(number, int):
        raise TypeError("Sorry, Number must be an integer")
    if not number >= 0:
        raise ValueError("Sorry, Number must be larger than zero")
    
    def inner_factorial(number):
        if number <= 1:
            return 1
        return number * inner_factorial(number-1)
    return inner_factorial(number)

#call outer function
print(factorial(4))

'''
End Functions CourseWork
'''
